// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: logquery.proto

package logquery

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message containing grep pattern and options
type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       string                 `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`                      // The grep pattern to search for
	Options       string                 `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`                      // Grep options (e.g., "-i", "-E", "-v")
	MachineId     string                 `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"` // Machine identifier for logging
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_logquery_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logquery_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_logquery_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *QueryRequest) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *QueryRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

// Response message containing search results
type QueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MachineId     string                 `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`  // Machine that processed the query
	LineCount     int32                  `protobuf:"varint,2,opt,name=line_count,json=lineCount,proto3" json:"line_count,omitempty"` // Number of matching lines found
	Filename      string                 `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`                     // Name of the log file searched
	Lines         []string               `protobuf:"bytes,4,rep,name=lines,proto3" json:"lines,omitempty"`                           // Matching log lines
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                           // Error message if any
	Success       bool                   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`                      // Whether the query was successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_logquery_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logquery_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_logquery_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResponse) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *QueryResponse) GetLineCount() int32 {
	if x != nil {
		return x.LineCount
	}
	return 0
}

func (x *QueryResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *QueryResponse) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *QueryResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_logquery_proto protoreflect.FileDescriptor

const file_logquery_proto_rawDesc = "" +
	"\n" +
	"\x0elogquery.proto\x12\blogquery\"a\n" +
	"\fQueryRequest\x12\x18\n" +
	"\apattern\x18\x01 \x01(\tR\apattern\x12\x18\n" +
	"\aoptions\x18\x02 \x01(\tR\aoptions\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x03 \x01(\tR\tmachineId\"\xaf\x01\n" +
	"\rQueryResponse\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x01 \x01(\tR\tmachineId\x12\x1d\n" +
	"\n" +
	"line_count\x18\x02 \x01(\x05R\tlineCount\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x14\n" +
	"\x05lines\x18\x04 \x03(\tR\x05lines\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12\x18\n" +
	"\asuccess\x18\x06 \x01(\bR\asuccess2H\n" +
	"\bLogQuery\x12<\n" +
	"\tQueryLogs\x12\x16.logquery.QueryRequest\x1a\x17.logquery.QueryResponseB'Z%github.com/sujayx23/g71_test/logqueryb\x06proto3"

var (
	file_logquery_proto_rawDescOnce sync.Once
	file_logquery_proto_rawDescData []byte
)

func file_logquery_proto_rawDescGZIP() []byte {
	file_logquery_proto_rawDescOnce.Do(func() {
		file_logquery_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_logquery_proto_rawDesc), len(file_logquery_proto_rawDesc)))
	})
	return file_logquery_proto_rawDescData
}

var file_logquery_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_logquery_proto_goTypes = []any{
	(*QueryRequest)(nil),  // 0: logquery.QueryRequest
	(*QueryResponse)(nil), // 1: logquery.QueryResponse
}
var file_logquery_proto_depIdxs = []int32{
	0, // 0: logquery.LogQuery.QueryLogs:input_type -> logquery.QueryRequest
	1, // 1: logquery.LogQuery.QueryLogs:output_type -> logquery.QueryResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_logquery_proto_init() }
func file_logquery_proto_init() {
	if File_logquery_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_logquery_proto_rawDesc), len(file_logquery_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logquery_proto_goTypes,
		DependencyIndexes: file_logquery_proto_depIdxs,
		MessageInfos:      file_logquery_proto_msgTypes,
	}.Build()
	File_logquery_proto = out.File
	file_logquery_proto_goTypes = nil
	file_logquery_proto_depIdxs = nil
}
